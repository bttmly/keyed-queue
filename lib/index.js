// Generated by CoffeeScript 1.8.0
var KeyedQueue, get, hasOwn;

hasOwn = Function.prototype.call.bind(Object.prototype.hasOwnProperty);

get = function(key) {
  return function(obj) {
    return obj[key];
  };
};

KeyedQueue = function() {
  var instance, queue, store;
  store = Object.create(null);
  queue = [];
  instance = {
    enqueue: function(key, value) {
      if (instance.has(key)) {
        return null;
      }
      queue.push({
        key: key,
        value: value
      });
      store[key] = value;
      return queue.length;
    },
    dequeue: function() {
      var item;
      item = queue.shift();
      delete store[item.key];
      return item.value;
    },
    get: function(key) {
      return store[key];
    },
    has: function(key) {
      return hasOwn(store, key);
    },
    peek: function() {
      if (!queue.length) {
        return null;
      }
      return store[queue[0].key];
    },
    size: function() {
      return queue.length;
    },
    keys: function() {
      return queue.map(get("key"));
    },
    clear: function() {
      store = Object.create(null);
      return queue = [];
    }
  };
  return instance;
};

module.exports = KeyedQueue;
